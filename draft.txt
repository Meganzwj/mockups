import React, { useState } from 'react';

// Layout component
const Layout = ({ children, onNavigate, showBack }) => (
  <div className="flex flex-col min-h-screen">
    <header className="bg-blue-600 text-white p-4">
      <div className="container mx-auto flex justify-between items-center">
        <h1 className="text-2xl font-bold cursor-pointer" onClick={() => onNavigate('Home')}>Data Access Portal</h1>
        {showBack && (
          <button onClick={() => onNavigate('Home')} className="bg-white text-blue-600 px-4 py-2 rounded hover:bg-blue-100">
            Back to Home
          </button>
        )}
      </div>
    </header>
    <main className="flex-grow container mx-auto px-4 py-8">
      {children}
    </main>
    <footer className="bg-gray-200 p-4">
      <div className="container mx-auto text-center">
        <p>&copy; 2024 Data Access Portal. All rights reserved.</p>
      </div>
    </footer>
  </div>
);

// Home page component
const HomePage = ({ onNavigate }) => (
  <div className="text-center">
    <h2 className="text-3xl font-bold mb-8">Self Service Data Request Tool</h2>
    <p className="mb-8 text-xl">
      Welcome to our data access self-service portal. Choose an option below to get started:
    </p>
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-2xl mx-auto">
      {[
        { title: "Request Data Access", action: "RequestData", color: "blue", description: "Select datasets, columns, or rows you need access to." },
        { title: "Request Compute Power", action: "RequestCompute", color: "green", description: "Choose the compute instance that fits your needs." },
        { title: "View My Requests", action: "MyRequests", color: "yellow", description: "Check the status of your submitted requests." },
        { title: "Contact Support", action: "ContactUs", color: "purple", description: "Get in touch with our support team for assistance." }
      ].map((item, index) => (
        <div key={index} className={`bg-${item.color}-100 shadow-md rounded-lg p-6 flex flex-col justify-between`}>
          <div>
            <h3 className={`text-xl font-semibold mb-2 text-${item.color}-700`}>{item.title}</h3>
            <p className={`mb-4 text-${item.color}-600`}>{item.description}</p>
          </div>
          <button 
            onClick={() => onNavigate(item.action)} 
            className={`bg-${item.color}-600 text-white px-4 py-2 rounded hover:bg-${item.color}-700 transition-colors`}
          >
            {item.title}
          </button>
        </div>
      ))}
    </div>
  </div>
);

// Request Data Page
const RequestDataPage = () => {
  const [step, setStep] = useState('database');
  const [selected, setSelected] = useState({ database: '', table: '', columns: [] });
  const [searchTerm, setSearchTerm] = useState('');
  const [users, setUsers] = useState([]);

  // Mock data
  const databases = ['CustomerDB', 'SalesDB', 'ProductDB', 'AnalyticsDB'];
  const tables = ['Users', 'Transactions', 'Products', 'Analytics'];
  const columns = ['ID', 'Name', 'Email', 'Address', 'Phone', 'Purchase Date', 'Amount'];
  const allUsers = ['User1', 'User2', 'User3', 'User4', 'User5'];

  const filteredItems = (items) => {
    return items.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));
  }

  const renderStep = () => {
    switch(step) {
      case 'database':
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Select Database</h3>
            <ul>
              {filteredItems(databases).map(db => (
                <li key={db} className="mb-2">
                  <button
                    onClick={() => {
                      setSelected({...selected, database: db});
                      setStep('table');
                    }}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    {db}
                  </button>
                </li>
              ))}
            </ul>
          </div>
        );
      case 'table':
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Select Table from {selected.database}</h3>
            <ul>
              {filteredItems(tables).map(table => (
                <li key={table} className="mb-2">
                  <button
                    onClick={() => {
                      setSelected({...selected, table: table});
                      setStep('column');
                    }}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    {table}
                  </button>
                </li>
              ))}
            </ul>
          </div>
        );
      case 'column':
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Select Columns from {selected.table}</h3>
            {filteredItems(columns).map(column => (
              <div key={column} className="mb-2">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={selected.columns.includes(column)}
                    onChange={() => {
                      const updatedColumns = selected.columns.includes(column)
                        ? selected.columns.filter(c => c !== column)
                        : [...selected.columns, column];
                      setSelected({...selected, columns: updatedColumns});
                    }}
                    className="mr-2"
                  />
                  {column}
                </label>
              </div>
            ))}
            <button
              onClick={() => setStep('users')}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-4"
            >
              Next: Select Users
            </button>
          </div>
        );
      case 'users':
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Select Users to Grant/Revoke Access</h3>
            {filteredItems(allUsers).map(user => (
              <div key={user} className="mb-2">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={users.includes(user)}
                    onChange={() => {
                      const updatedUsers = users.includes(user)
                        ? users.filter(u => u !== user)
                        : [...users, user];
                      setUsers(updatedUsers);
                    }}
                    className="mr-2"
                  />
                  {user}
                </label>
              </div>
            ))}
            <button
              onClick={() => {
                console.log('Submitting request:', { ...selected, users });
                alert('Data access request submitted successfully!');
              }}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-4"
            >
              Submit Request
            </button>
          </div>
        );
      default:
        return null;
    }
  }

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Request Data Access</h2>
      <input
        type="text"
        placeholder="Search..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="w-full p-2 mb-4 border rounded"
      />
      {renderStep()}
    </div>
  );
};

// Request Compute Page
const RequestComputePage = () => {
  const [selectedCluster, setSelectedCluster] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  // Mock data
  const clusters = ['Data Science Cluster', 'Analytics Cluster', 'ML Training Cluster', 'Big Data Processing Cluster'];

  const filteredClusters = clusters.filter(cluster => 
    cluster.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Request Compute Power</h2>
      <input
        type="text"
        placeholder="Search clusters..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="w-full p-2 mb-4 border rounded"
      />
      <div className="mb-4">
        <h3 className="text-xl font-semibold mb-2">Select a Cluster</h3>
        {filteredClusters.map(cluster => (
          <div key={cluster} className="mb-2">
            <label className="flex items-center">
              <input
                type="radio"
                name="cluster"
                value={cluster}
                checked={selectedCluster === cluster}
                onChange={() => setSelectedCluster(cluster)}
                className="mr-2"
              />
              {cluster}
            </label>
          </div>
        ))}
      </div>
      <button
        onClick={() => {
          console.log('Submitting compute request:', selectedCluster);
          alert('Compute power request submitted successfully!');
        }}
        className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        disabled={!selectedCluster}
      >
        Submit Request
      </button>
    </div>
  );
};

// My Requests Page
const MyRequestsPage = () => {
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  // Mock data
  const requests = [
    { id: 1, type: 'data', status: 'approved', details: 'Access to CustomerDB.Users.Email' },
    { id: 2, type: 'compute', status: 'pending', details: 'Data Science Cluster' },
    { id: 3, type: 'data', status: 'rejected', details: 'Access to SalesDB.Transactions' },
    { id: 4, type: 'compute', status: 'approved', details: 'Analytics Cluster' },
  ];

  const filteredRequests = requests.filter(request => 
    (filter === 'all' || request.type === filter) &&
    (request.details.toLowerCase().includes(searchTerm.toLowerCase()) ||
     request.status.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">My Requests</h2>
      <div className="mb-4">
        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="mr-2 p-2 border rounded"
        >
          <option value="all">All Requests</option>
          <option value="data">Data Access</option>
          <option value="compute">Compute Resources</option>
        </select>
        <input
          type="text"
          placeholder="Search requests..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="p-2 border rounded"
        />
      </div>
      <ul>
        {filteredRequests.map(request => (
          <li key={request.id} className="mb-4 p-4 border rounded">
            <div className="font-semibold">{request.type === 'data' ? 'Data Access Request' : 'Compute Request'}</div>
            <div>Status: <span className={`font-semibold ${request.status === 'approved' ? 'text-green-600' : request.status === 'rejected' ? 'text-red-600' : 'text-yellow-600'}`}>{request.status}</span></div>
            <div>Details: {request.details}</div>
          </li>
        ))}
      </ul>
    </div>
  );
};

// Contact Us Page
const ContactUsPage = () => (
  <div className="text-center">
    <h2 className="text-2xl font-bold mb-4">Contact Support</h2>
    <p className="mb-4">For assistance, please reach out to:</p>
    <div className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
      <p className="font-bold">Contact Information</p>
      <p>
        <a href="mailto:support@dataaccess.com" className="text-blue-600 hover:underline">
          support@dataaccess.com
        </a>
      </p>
    </div>
  </div>
);

// Main App component
const App = () => {
  const [currentPage, setCurrentPage] = useState('Home');

  const handleNavigate = (page) => {
    setCurrentPage(page);
  };

  const renderPage = () => {
    switch (currentPage) {
      case 'Home':
        return <HomePage onNavigate={handleNavigate} />;
      case 'RequestData':
        return <RequestDataPage />;
      case 'MyRequests':
        return <MyRequestsPage />;
      case 'RequestCompute':
        return <RequestComputePage />;
      case 'ContactUs':
        return <ContactUsPage />;
      default:
        return <HomePage onNavigate={handleNavigate} />;
    }
  };

  return (
    <Layout onNavigate={handleNavigate} showBack={currentPage !== 'Home'}>
      {renderPage()}
    </Layout>
  );
};

export default App;